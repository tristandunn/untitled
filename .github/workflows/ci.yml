name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12-alpine
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10ms --health-retries 10 --health-timeout 1s
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Determine the Ruby version
        id: ruby-version
        run: echo "::set-output name=version::$(cat .ruby-version)"
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ steps.ruby-version.outputs.version }}
      - name: Cache the Ruby dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-bundle-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-bundle-
      - name: Install the Ruby dependencies
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Determine the Node version
        id: node-version
        run: echo "::set-output name=version::$(cat package.json | perl -pe '($_)=/"node":\s+"([0-9]+([.][0-9]+)+)"/')"
      - name: Install Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node-version.outputs.version }}
      - name: Cache the Node dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install the Node dependencies
        run: yarn install --pure-lockfile
      - name: Run the Ruby tests
        env:
          COVERAGE: true
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          RAILS_ENV: test
        run: bundle exec rails db:setup ruby:test
      - name: Run the JavaScript tests
        run: yarn test:coverage
      - name: Lint the code
        uses: wearerequired/lint-action@v1
        with:
          ESLINT: true
          ESLINT_EXTENSIONS: js,jsx
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUBOCOP: true
          RUBOCOP_COMMAND_PREFIX: bundle exec
          STYLELINT: true
      - name: Scan for vulnerabilities
        uses: devmasx/brakeman-linter-action@v1.0.0
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Audit the Bundler dependencies
        uses: andrewmcodes/bundler-audit-action@v0.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
